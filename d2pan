#!/usr/bin/perl

use strict;
use File::Basename;
use Config;

my $dir = "lectures";
my $diro = "pandoc";

my $title = "";

sub cpImage{
  my $imgsrc = shift;

  #- Skip URLS
  if($imgsrc =~ m/^\s*http/){
    return $imgsrc;
  }

  if(!-d $diro."/media"){
    mkdir $diro."/media"
  }

  my $imgdst = "media/".basename($imgsrc);

  if($imgdst =~ m/\.pdf/ig){
    $imgdst  =~ s/\.pdf/\.png/ig;

    if(!-f $diro."/".$imgdst){
      if($Config{'osname'} eq "linux"){
        if($imgsrc =~ m/\.pdf/ig){

          system("cd $diro; gs -dSAFER -r600 -sDEVICE=pngalpha -o $imgdst $imgsrc;")
        }else{
          system("cd $diro; convert  $imgsrc $imgdst");
        }
      }else{
        #- Assume mac
        system("cd $diro; sips -s format png $imgsrc --out $imgdst");
      }

    }
  }else{
    if(!-f $diro."/".$imgdst){
      system("cd $diro; cp $imgsrc $imgdst");
    }
  }
  return $imgdst;
}


sub d2m{
  my $fi = shift;
  my $fo = shift;
  my $imgwidth = "{width: 250}";
  open(FI,'<', $fi) or die "Could not open $fi";


  print $fi."\n";
  my $buffer = "";
  my $output = 0;
  my $first = 1;
  my $skip_to_next_slide = 0;
  my $remove_comment = 0;

  while(<FI>){

    #- Skip Metadata
    if($first and m/^\s*$/ig){
      $output = 1;
      $first = 0;
    }


    if(m/<!--pan_([^:]+):(.*)$/ig ){

      my $key = $1;
      my $val = $2;
      if($key eq "title"){
        $title = $2;
        $title =~ s/-->//ig;


        next;
      }elsif($key eq "skip"){
        #print ">> Skipping slide\n";
        $output = 0;
        $skip_to_next_slide = 1;
      }elsif($key eq "doc"){

        # Start statemachine
        # 1. Skip this line, it should be <!--pan_doc:
        # 2. Enable removing -->
        # 3. When -->, assume that's the end of the pan_doc, and go back to normal

        $remove_comment = 1;
        next;
      }
    }


    if($remove_comment and m/-->/ig){
      $remove_comment  = 0;
      next;
    }


    #- Remove spacers
    s/^\s*--\s*$//ig;

    #- Don't know what to do with columns
    s/\[.column]//ig;


    #- Fix headings
    s/\#\s*\[\s*fit\s*\]/# /ig;

    #- Fix math spaces
    s/\s*\$\$\s*/\$\$/ig;

    #- Demote headings
    #s/^\s*#/##/ig;

    s/^#(.*) Thanks!//ig;

    #- Fix images
    if(m/\!\[([^\]]*)\]\(([^\)]+)\)/ig){

      my $imgsrc = $2;
      my $imgdst = &cpImage($imgsrc);

      #$_ = "<img src='$imgdst' ></img><br>\n";
      $_ = "![]($imgdst)\n";

    }

    if(m/^\s*---\s*$/ and $skip_to_next_slide){
      $output = 1;
    }

    #- Remove lines
    s/^\s*---\s*$//ig;

    if($output){
      $buffer .= $_;
    }else{
      #print $_
    }

  }

  my $date = `date +%Y-%m-%d`;

  open(FO,'>', $fo) or die "could not open $fo for writing";

  print FO "---\n";
  print FO "title: $title\n";
  print FO <<"EOF";
author:
  - Carsten Wulff, $date
documentclass: IEEEtran
papersize: a4
classoption: journal
EOF

  print FO "---\n";

  print FO $buffer;

  close(FI);
  close(FO);
}

sub pandoc{
  my $fo = shift;
  my $foh = $fo;
  $foh =~ s/\.md/\.html/ig;
  system("pandoc -o $foh -t html --toc  --mathjax --from=markdown+pipe_tables  --metadata title='$title' -s $fo")

}

sub pdf{
  my $fo = shift;
  my $foh = $fo;
  my $fop = $fo;
  $foh =~ s/\.md/\.html/ig;
  $fop =~ s/\.md/\.pdf/ig;

  my $chrome;
  if($Config{'osname'} eq "linux"){
    $chrome = "google-chrome";
  }else{
    #- Assume mac
    $chrome = "\"/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome\"";
  }

  my $cmd = "$chrome --headless  --run-all-compositor-stages-before-draw --print-to-pdf-no-header --disable-gpu --print-to-pdf=$fop $foh";

  print($cmd);
  system($cmd);
}


#---------------------------------------------------------------------
# Script
#---------------------------------------------------------------------

#print(."\n");



if(!-d pandoc){
  mkdir "pandoc"
}

my $file = shift;
my $noimg = shift;

opendir(D,$dir) || die "Could not open $dir";
my @lectures;

while(readdir(D)){



  if(m/^l.*\.md/){
    if(defined($file) && m/$file/ || !defined($file)){
      push(@lectures,$_);
    }
  }

}

close(D);

my $md ="# AIC2022 \n";

foreach my $l(sort(@lectures)){
  my $fi = $dir ."/".$l;
  my $fo = $diro."/".$l;

  my $hf = $l;
  $hf =~ s/\.md/\.html/ig;

  $md .= " - [$hf]($hf)\n";

  &d2m($fi,$fo);
  &pandoc($fo);
  #&pdf($fo);
}

my $index = $diro."/index.md";
open(fo,">",$index) or die "Could not open $index";
print fo $md;
close(fo) or die "Could not close $index";
#&pandoc($index)
